/* tslint:disable */
/* eslint-disable */
/**
 * Diploma FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AttendanceCreate
 */
export interface AttendanceCreate {
    /**
     * 
     * @type {number}
     * @memberof AttendanceCreate
     */
    'student_user_id': number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreate
     */
    'time_in': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceCreate
     */
    'time_out'?: string | null;
}
/**
 * 
 * @export
 * @interface AttendanceOut
 */
export interface AttendanceOut {
    /**
     * 
     * @type {number}
     * @memberof AttendanceOut
     */
    'student_user_id': number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceOut
     */
    'time_in': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceOut
     */
    'time_out'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AttendanceOut
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AttendanceOut
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof AttendanceOut
     */
    'updated_at'?: string | null;
}
/**
 * 
 * @export
 * @interface AttendanceUpdate
 */
export interface AttendanceUpdate {
    /**
     * 
     * @type {string}
     * @memberof AttendanceUpdate
     */
    'time_out'?: string | null;
}
/**
 * 
 * @export
 * @interface ClassCreate
 */
export interface ClassCreate {
    /**
     * 
     * @type {string}
     * @memberof ClassCreate
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ClassCreate
     */
    'teacher_user_id': number;
}
/**
 * 
 * @export
 * @interface ClassOut
 */
export interface ClassOut {
    /**
     * 
     * @type {string}
     * @memberof ClassOut
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ClassOut
     */
    'teacher_user_id': number;
    /**
     * 
     * @type {number}
     * @memberof ClassOut
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ClassStudentCreate
 */
export interface ClassStudentCreate {
    /**
     * 
     * @type {number}
     * @memberof ClassStudentCreate
     */
    'class_id': number;
    /**
     * 
     * @type {number}
     * @memberof ClassStudentCreate
     */
    'student_user_id': number;
}
/**
 * 
 * @export
 * @interface ClassStudentOut
 */
export interface ClassStudentOut {
    /**
     * 
     * @type {number}
     * @memberof ClassStudentOut
     */
    'class_id': number;
    /**
     * 
     * @type {number}
     * @memberof ClassStudentOut
     */
    'student_user_id': number;
    /**
     * 
     * @type {number}
     * @memberof ClassStudentOut
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ClassStudentOut
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ClassStudentOut
     */
    'updated_at'?: string | null;
}
/**
 * 
 * @export
 * @interface ClassStudentUpdate
 */
export interface ClassStudentUpdate {
    /**
     * 
     * @type {number}
     * @memberof ClassStudentUpdate
     */
    'class_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ClassStudentUpdate
     */
    'student_user_id'?: number | null;
}
/**
 * 
 * @export
 * @interface ClassUpdate
 */
export interface ClassUpdate {
    /**
     * 
     * @type {string}
     * @memberof ClassUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ClassUpdate
     */
    'teacher_user_id'?: number | null;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ParentStudentCreate
 */
export interface ParentStudentCreate {
    /**
     * 
     * @type {number}
     * @memberof ParentStudentCreate
     */
    'parent_user_id': number;
    /**
     * 
     * @type {number}
     * @memberof ParentStudentCreate
     */
    'student_user_id': number;
}
/**
 * 
 * @export
 * @interface ParentStudentOut
 */
export interface ParentStudentOut {
    /**
     * 
     * @type {number}
     * @memberof ParentStudentOut
     */
    'parent_user_id': number;
    /**
     * 
     * @type {number}
     * @memberof ParentStudentOut
     */
    'student_user_id': number;
    /**
     * 
     * @type {number}
     * @memberof ParentStudentOut
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ParentStudentOut
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ParentStudentOut
     */
    'updated_at'?: string | null;
}
/**
 * 
 * @export
 * @interface ParentStudentUpdate
 */
export interface ParentStudentUpdate {
    /**
     * 
     * @type {number}
     * @memberof ParentStudentUpdate
     */
    'parent_user_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ParentStudentUpdate
     */
    'student_user_id'?: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RoleEnum = {
    admin: 'admin',
    teacher: 'teacher',
    student: 'student',
    parent: 'parent'
} as const;

export type RoleEnum = typeof RoleEnum[keyof typeof RoleEnum];


/**
 * 
 * @export
 * @interface TokenModel
 */
export interface TokenModel {
    /**
     * 
     * @type {string}
     * @memberof TokenModel
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof TokenModel
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'email': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserCreate
     */
    'role': RoleEnum;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}


/**
 * 
 * @export
 * @interface UserOut
 */
export interface UserOut {
    /**
     * 
     * @type {string}
     * @memberof UserOut
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserOut
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserOut
     */
    'email': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserOut
     */
    'role': RoleEnum;
    /**
     * 
     * @type {number}
     * @memberof UserOut
     */
    'id': number;
}


/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof UserUpdate
     */
    'email': string;
    /**
     * 
     * @type {RoleEnum}
     * @memberof UserUpdate
     */
    'role': RoleEnum;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AttendancesApi - axios parameter creator
 * @export
 */
export const AttendancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Attendance
         * @param {AttendanceCreate} attendanceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttendanceApiV1AttendancesPost: async (attendanceCreate: AttendanceCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceCreate' is not null or undefined
            assertParamExists('createAttendanceApiV1AttendancesPost', 'attendanceCreate', attendanceCreate)
            const localVarPath = `/api/v1/attendances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendanceApiV1AttendancesAttendanceIdDelete: async (attendanceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceId' is not null or undefined
            assertParamExists('deleteAttendanceApiV1AttendancesAttendanceIdDelete', 'attendanceId', attendanceId)
            const localVarPath = `/api/v1/attendances/{attendance_id}`
                .replace(`{${"attendance_id"}}`, encodeURIComponent(String(attendanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendanceApiV1AttendancesAttendanceIdGet: async (attendanceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceId' is not null or undefined
            assertParamExists('readAttendanceApiV1AttendancesAttendanceIdGet', 'attendanceId', attendanceId)
            const localVarPath = `/api/v1/attendances/{attendance_id}`
                .replace(`{${"attendance_id"}}`, encodeURIComponent(String(attendanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Attendances
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesApiV1AttendancesGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/attendances/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Attendances By Date Range
         * @param {string} startDate Start date for attendance records
         * @param {string} endDate End date for attendance records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesByDateRangeApiV1AttendancesDateRangeGet: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('readAttendancesByDateRangeApiV1AttendancesDateRangeGet', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('readAttendancesByDateRangeApiV1AttendancesDateRangeGet', 'endDate', endDate)
            const localVarPath = `/api/v1/attendances/date-range`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Attendances By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesByStudentApiV1AttendancesStudentStudentIdGet: async (studentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('readAttendancesByStudentApiV1AttendancesStudentStudentIdGet', 'studentId', studentId)
            const localVarPath = `/api/v1/attendances/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Attendance
         * @param {number} attendanceId 
         * @param {AttendanceUpdate} attendanceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendanceApiV1AttendancesAttendanceIdPut: async (attendanceId: number, attendanceUpdate: AttendanceUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attendanceId' is not null or undefined
            assertParamExists('updateAttendanceApiV1AttendancesAttendanceIdPut', 'attendanceId', attendanceId)
            // verify required parameter 'attendanceUpdate' is not null or undefined
            assertParamExists('updateAttendanceApiV1AttendancesAttendanceIdPut', 'attendanceUpdate', attendanceUpdate)
            const localVarPath = `/api/v1/attendances/{attendance_id}`
                .replace(`{${"attendance_id"}}`, encodeURIComponent(String(attendanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attendanceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttendancesApi - functional programming interface
 * @export
 */
export const AttendancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttendancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Attendance
         * @param {AttendanceCreate} attendanceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttendanceApiV1AttendancesPost(attendanceCreate: AttendanceCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttendanceApiV1AttendancesPost(attendanceCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.createAttendanceApiV1AttendancesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.deleteAttendanceApiV1AttendancesAttendanceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.readAttendanceApiV1AttendancesAttendanceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Attendances
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttendancesApiV1AttendancesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttendanceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttendancesApiV1AttendancesGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.readAttendancesApiV1AttendancesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Attendances By Date Range
         * @param {string} startDate Start date for attendance records
         * @param {string} endDate End date for attendance records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttendanceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.readAttendancesByDateRangeApiV1AttendancesDateRangeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Attendances By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AttendanceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.readAttendancesByStudentApiV1AttendancesStudentStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Attendance
         * @param {number} attendanceId 
         * @param {AttendanceUpdate} attendanceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId: number, attendanceUpdate: AttendanceUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttendanceOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId, attendanceUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AttendancesApi.updateAttendanceApiV1AttendancesAttendanceIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AttendancesApi - factory interface
 * @export
 */
export const AttendancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttendancesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Attendance
         * @param {AttendanceCreate} attendanceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttendanceApiV1AttendancesPost(attendanceCreate: AttendanceCreate, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceOut> {
            return localVarFp.createAttendanceApiV1AttendancesPost(attendanceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Attendance
         * @param {number} attendanceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId: number, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceOut> {
            return localVarFp.readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Attendances
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesApiV1AttendancesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AttendanceOut>> {
            return localVarFp.readAttendancesApiV1AttendancesGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Attendances By Date Range
         * @param {string} startDate Start date for attendance records
         * @param {string} endDate End date for attendance records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate: string, endDate: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<AttendanceOut>> {
            return localVarFp.readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Attendances By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<AttendanceOut>> {
            return localVarFp.readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Attendance
         * @param {number} attendanceId 
         * @param {AttendanceUpdate} attendanceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId: number, attendanceUpdate: AttendanceUpdate, options?: RawAxiosRequestConfig): AxiosPromise<AttendanceOut> {
            return localVarFp.updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId, attendanceUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttendancesApi - object-oriented interface
 * @export
 * @class AttendancesApi
 * @extends {BaseAPI}
 */
export class AttendancesApi extends BaseAPI {
    /**
     * 
     * @summary Create Attendance
     * @param {AttendanceCreate} attendanceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public createAttendanceApiV1AttendancesPost(attendanceCreate: AttendanceCreate, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).createAttendanceApiV1AttendancesPost(attendanceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Attendance
     * @param {number} attendanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId: number, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).deleteAttendanceApiV1AttendancesAttendanceIdDelete(attendanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Attendance
     * @param {number} attendanceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId: number, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).readAttendanceApiV1AttendancesAttendanceIdGet(attendanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Attendances
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public readAttendancesApiV1AttendancesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).readAttendancesApiV1AttendancesGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Attendances By Date Range
     * @param {string} startDate Start date for attendance records
     * @param {string} endDate End date for attendance records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate: string, endDate: string, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).readAttendancesByDateRangeApiV1AttendancesDateRangeGet(startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Attendances By Student
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).readAttendancesByStudentApiV1AttendancesStudentStudentIdGet(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Attendance
     * @param {number} attendanceId 
     * @param {AttendanceUpdate} attendanceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttendancesApi
     */
    public updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId: number, attendanceUpdate: AttendanceUpdate, options?: RawAxiosRequestConfig) {
        return AttendancesApiFp(this.configuration).updateAttendanceApiV1AttendancesAttendanceIdPut(attendanceId, attendanceUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginApiV1AuthLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginApiV1AuthLoginPost', 'password', password)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerApiV1AuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.loginApiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerApiV1AuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.registerApiV1AuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<TokenModel> {
            return localVarFp.loginApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.registerApiV1AuthRegisterPost(userCreate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginApiV1AuthLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginApiV1AuthLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerApiV1AuthRegisterPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassStudentsApi - axios parameter creator
 * @export
 */
export const ClassStudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Class Student
         * @param {ClassStudentCreate} classStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassStudentApiV1ClassStudentsPost: async (classStudentCreate: ClassStudentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classStudentCreate' is not null or undefined
            assertParamExists('createClassStudentApiV1ClassStudentsPost', 'classStudentCreate', classStudentCreate)
            const localVarPath = `/api/v1/class-students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classStudentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClassStudentApiV1ClassStudentsClassStudentIdDelete: async (classStudentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classStudentId' is not null or undefined
            assertParamExists('deleteClassStudentApiV1ClassStudentsClassStudentIdDelete', 'classStudentId', classStudentId)
            const localVarPath = `/api/v1/class-students/{class_student_id}`
                .replace(`{${"class_student_id"}}`, encodeURIComponent(String(classStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassStudentApiV1ClassStudentsClassStudentIdGet: async (classStudentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classStudentId' is not null or undefined
            assertParamExists('readClassStudentApiV1ClassStudentsClassStudentIdGet', 'classStudentId', classStudentId)
            const localVarPath = `/api/v1/class-students/{class_student_id}`
                .replace(`{${"class_student_id"}}`, encodeURIComponent(String(classStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Class Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassStudentsApiV1ClassStudentsGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/class-students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Classes By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesByStudentApiV1ClassStudentsStudentStudentIdGet: async (studentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('readClassesByStudentApiV1ClassStudentsStudentStudentIdGet', 'studentId', studentId)
            const localVarPath = `/api/v1/class-students/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Students By Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsByClassApiV1ClassStudentsClassClassIdGet: async (classId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('readStudentsByClassApiV1ClassStudentsClassClassIdGet', 'classId', classId)
            const localVarPath = `/api/v1/class-students/class/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Class Student
         * @param {number} classStudentId 
         * @param {ClassStudentUpdate} classStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClassStudentApiV1ClassStudentsClassStudentIdPut: async (classStudentId: number, classStudentUpdate: ClassStudentUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classStudentId' is not null or undefined
            assertParamExists('updateClassStudentApiV1ClassStudentsClassStudentIdPut', 'classStudentId', classStudentId)
            // verify required parameter 'classStudentUpdate' is not null or undefined
            assertParamExists('updateClassStudentApiV1ClassStudentsClassStudentIdPut', 'classStudentUpdate', classStudentUpdate)
            const localVarPath = `/api/v1/class-students/{class_student_id}`
                .replace(`{${"class_student_id"}}`, encodeURIComponent(String(classStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classStudentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassStudentsApi - functional programming interface
 * @export
 */
export const ClassStudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassStudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Class Student
         * @param {ClassStudentCreate} classStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClassStudentApiV1ClassStudentsPost(classStudentCreate: ClassStudentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClassStudentApiV1ClassStudentsPost(classStudentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.createClassStudentApiV1ClassStudentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.deleteClassStudentApiV1ClassStudentsClassStudentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.readClassStudentApiV1ClassStudentsClassStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Class Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassStudentsApiV1ClassStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassStudentsApiV1ClassStudentsGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.readClassStudentsApiV1ClassStudentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Classes By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.readClassesByStudentApiV1ClassStudentsStudentStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Students By Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.readStudentsByClassApiV1ClassStudentsClassClassIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Class Student
         * @param {number} classStudentId 
         * @param {ClassStudentUpdate} classStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId: number, classStudentUpdate: ClassStudentUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId, classStudentUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassStudentsApi.updateClassStudentApiV1ClassStudentsClassStudentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassStudentsApi - factory interface
 * @export
 */
export const ClassStudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassStudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Class Student
         * @param {ClassStudentCreate} classStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassStudentApiV1ClassStudentsPost(classStudentCreate: ClassStudentCreate, options?: RawAxiosRequestConfig): AxiosPromise<ClassStudentOut> {
            return localVarFp.createClassStudentApiV1ClassStudentsPost(classStudentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Class Student
         * @param {number} classStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ClassStudentOut> {
            return localVarFp.readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Class Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassStudentsApiV1ClassStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassStudentOut>> {
            return localVarFp.readClassStudentsApiV1ClassStudentsGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Classes By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassStudentOut>> {
            return localVarFp.readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Students By Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassStudentOut>> {
            return localVarFp.readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Class Student
         * @param {number} classStudentId 
         * @param {ClassStudentUpdate} classStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId: number, classStudentUpdate: ClassStudentUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ClassStudentOut> {
            return localVarFp.updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId, classStudentUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassStudentsApi - object-oriented interface
 * @export
 * @class ClassStudentsApi
 * @extends {BaseAPI}
 */
export class ClassStudentsApi extends BaseAPI {
    /**
     * 
     * @summary Create Class Student
     * @param {ClassStudentCreate} classStudentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public createClassStudentApiV1ClassStudentsPost(classStudentCreate: ClassStudentCreate, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).createClassStudentApiV1ClassStudentsPost(classStudentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Class Student
     * @param {number} classStudentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId: number, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).deleteClassStudentApiV1ClassStudentsClassStudentIdDelete(classStudentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Class Student
     * @param {number} classStudentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId: number, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).readClassStudentApiV1ClassStudentsClassStudentIdGet(classStudentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Class Students
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public readClassStudentsApiV1ClassStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).readClassStudentsApiV1ClassStudentsGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Classes By Student
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).readClassesByStudentApiV1ClassStudentsStudentStudentIdGet(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Students By Class
     * @param {number} classId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId: number, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).readStudentsByClassApiV1ClassStudentsClassClassIdGet(classId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Class Student
     * @param {number} classStudentId 
     * @param {ClassStudentUpdate} classStudentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassStudentsApi
     */
    public updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId: number, classStudentUpdate: ClassStudentUpdate, options?: RawAxiosRequestConfig) {
        return ClassStudentsApiFp(this.configuration).updateClassStudentApiV1ClassStudentsClassStudentIdPut(classStudentId, classStudentUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClassesApi - axios parameter creator
 * @export
 */
export const ClassesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Class
         * @param {ClassCreate} classCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassApiV1ClassesPost: async (classCreate: ClassCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classCreate' is not null or undefined
            assertParamExists('createClassApiV1ClassesPost', 'classCreate', classCreate)
            const localVarPath = `/api/v1/classes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClassApiV1ClassesClassIdDelete: async (classId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('deleteClassApiV1ClassesClassIdDelete', 'classId', classId)
            const localVarPath = `/api/v1/classes/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassApiV1ClassesClassIdGet: async (classId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('readClassApiV1ClassesClassIdGet', 'classId', classId)
            const localVarPath = `/api/v1/classes/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Classes
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesApiV1ClassesGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/classes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Classes By Teacher
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesByTeacherApiV1ClassesTeacherTeacherIdGet: async (teacherId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('readClassesByTeacherApiV1ClassesTeacherTeacherIdGet', 'teacherId', teacherId)
            const localVarPath = `/api/v1/classes/teacher/{teacher_id}`
                .replace(`{${"teacher_id"}}`, encodeURIComponent(String(teacherId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Class
         * @param {number} classId 
         * @param {ClassUpdate} classUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClassApiV1ClassesClassIdPut: async (classId: number, classUpdate: ClassUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'classId' is not null or undefined
            assertParamExists('updateClassApiV1ClassesClassIdPut', 'classId', classId)
            // verify required parameter 'classUpdate' is not null or undefined
            assertParamExists('updateClassApiV1ClassesClassIdPut', 'classUpdate', classUpdate)
            const localVarPath = `/api/v1/classes/{class_id}`
                .replace(`{${"class_id"}}`, encodeURIComponent(String(classId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(classUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClassesApi - functional programming interface
 * @export
 */
export const ClassesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClassesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Class
         * @param {ClassCreate} classCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClassApiV1ClassesPost(classCreate: ClassCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClassApiV1ClassesPost(classCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.createClassApiV1ClassesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClassApiV1ClassesClassIdDelete(classId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClassApiV1ClassesClassIdDelete(classId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.deleteClassApiV1ClassesClassIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassApiV1ClassesClassIdGet(classId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassApiV1ClassesClassIdGet(classId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.readClassApiV1ClassesClassIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Classes
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassesApiV1ClassesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassesApiV1ClassesGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.readClassesApiV1ClassesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Classes By Teacher
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClassOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.readClassesByTeacherApiV1ClassesTeacherTeacherIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Class
         * @param {number} classId 
         * @param {ClassUpdate} classUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClassApiV1ClassesClassIdPut(classId: number, classUpdate: ClassUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClassOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClassApiV1ClassesClassIdPut(classId, classUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClassesApi.updateClassApiV1ClassesClassIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClassesApi - factory interface
 * @export
 */
export const ClassesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClassesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Class
         * @param {ClassCreate} classCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClassApiV1ClassesPost(classCreate: ClassCreate, options?: RawAxiosRequestConfig): AxiosPromise<ClassOut> {
            return localVarFp.createClassApiV1ClassesPost(classCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClassApiV1ClassesClassIdDelete(classId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClassApiV1ClassesClassIdDelete(classId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Class
         * @param {number} classId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassApiV1ClassesClassIdGet(classId: number, options?: RawAxiosRequestConfig): AxiosPromise<ClassOut> {
            return localVarFp.readClassApiV1ClassesClassIdGet(classId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Classes
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesApiV1ClassesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassOut>> {
            return localVarFp.readClassesApiV1ClassesGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Classes By Teacher
         * @param {number} teacherId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClassOut>> {
            return localVarFp.readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Class
         * @param {number} classId 
         * @param {ClassUpdate} classUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClassApiV1ClassesClassIdPut(classId: number, classUpdate: ClassUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ClassOut> {
            return localVarFp.updateClassApiV1ClassesClassIdPut(classId, classUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClassesApi - object-oriented interface
 * @export
 * @class ClassesApi
 * @extends {BaseAPI}
 */
export class ClassesApi extends BaseAPI {
    /**
     * 
     * @summary Create Class
     * @param {ClassCreate} classCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public createClassApiV1ClassesPost(classCreate: ClassCreate, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).createClassApiV1ClassesPost(classCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Class
     * @param {number} classId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public deleteClassApiV1ClassesClassIdDelete(classId: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).deleteClassApiV1ClassesClassIdDelete(classId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Class
     * @param {number} classId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public readClassApiV1ClassesClassIdGet(classId: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).readClassApiV1ClassesClassIdGet(classId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Classes
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public readClassesApiV1ClassesGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).readClassesApiV1ClassesGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Classes By Teacher
     * @param {number} teacherId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId: number, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).readClassesByTeacherApiV1ClassesTeacherTeacherIdGet(teacherId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Class
     * @param {number} classId 
     * @param {ClassUpdate} classUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClassesApi
     */
    public updateClassApiV1ClassesClassIdPut(classId: number, classUpdate: ClassUpdate, options?: RawAxiosRequestConfig) {
        return ClassesApiFp(this.configuration).updateClassApiV1ClassesClassIdPut(classId, classUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.healthHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthHealthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ParentStudentsApi - axios parameter creator
 * @export
 */
export const ParentStudentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Parent Student
         * @param {ParentStudentCreate} parentStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParentStudentApiV1ParentStudentsPost: async (parentStudentCreate: ParentStudentCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentStudentCreate' is not null or undefined
            assertParamExists('createParentStudentApiV1ParentStudentsPost', 'parentStudentCreate', parentStudentCreate)
            const localVarPath = `/api/v1/parent-students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parentStudentCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParentStudentApiV1ParentStudentsParentStudentIdDelete: async (parentStudentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentStudentId' is not null or undefined
            assertParamExists('deleteParentStudentApiV1ParentStudentsParentStudentIdDelete', 'parentStudentId', parentStudentId)
            const localVarPath = `/api/v1/parent-students/{parent_student_id}`
                .replace(`{${"parent_student_id"}}`, encodeURIComponent(String(parentStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentStudentApiV1ParentStudentsParentStudentIdGet: async (parentStudentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentStudentId' is not null or undefined
            assertParamExists('readParentStudentApiV1ParentStudentsParentStudentIdGet', 'parentStudentId', parentStudentId)
            const localVarPath = `/api/v1/parent-students/{parent_student_id}`
                .replace(`{${"parent_student_id"}}`, encodeURIComponent(String(parentStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Parent Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentStudentsApiV1ParentStudentsGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/parent-students/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Parents By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentsByStudentApiV1ParentStudentsStudentStudentIdGet: async (studentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('readParentsByStudentApiV1ParentStudentsStudentStudentIdGet', 'studentId', studentId)
            const localVarPath = `/api/v1/parent-students/student/{student_id}`
                .replace(`{${"student_id"}}`, encodeURIComponent(String(studentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Students By Parent
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsByParentApiV1ParentStudentsParentParentIdGet: async (parentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('readStudentsByParentApiV1ParentStudentsParentParentIdGet', 'parentId', parentId)
            const localVarPath = `/api/v1/parent-students/parent/{parent_id}`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Parent Student
         * @param {number} parentStudentId 
         * @param {ParentStudentUpdate} parentStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParentStudentApiV1ParentStudentsParentStudentIdPut: async (parentStudentId: number, parentStudentUpdate: ParentStudentUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentStudentId' is not null or undefined
            assertParamExists('updateParentStudentApiV1ParentStudentsParentStudentIdPut', 'parentStudentId', parentStudentId)
            // verify required parameter 'parentStudentUpdate' is not null or undefined
            assertParamExists('updateParentStudentApiV1ParentStudentsParentStudentIdPut', 'parentStudentUpdate', parentStudentUpdate)
            const localVarPath = `/api/v1/parent-students/{parent_student_id}`
                .replace(`{${"parent_student_id"}}`, encodeURIComponent(String(parentStudentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(parentStudentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParentStudentsApi - functional programming interface
 * @export
 */
export const ParentStudentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParentStudentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Parent Student
         * @param {ParentStudentCreate} parentStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParentStudentApiV1ParentStudentsPost(parentStudentCreate: ParentStudentCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParentStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParentStudentApiV1ParentStudentsPost(parentStudentCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.createParentStudentApiV1ParentStudentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.deleteParentStudentApiV1ParentStudentsParentStudentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParentStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.readParentStudentApiV1ParentStudentsParentStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Parent Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readParentStudentsApiV1ParentStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParentStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readParentStudentsApiV1ParentStudentsGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.readParentStudentsApiV1ParentStudentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Parents By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParentStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.readParentsByStudentApiV1ParentStudentsStudentStudentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Students By Parent
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParentStudentOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.readStudentsByParentApiV1ParentStudentsParentParentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Parent Student
         * @param {number} parentStudentId 
         * @param {ParentStudentUpdate} parentStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId: number, parentStudentUpdate: ParentStudentUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParentStudentOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId, parentStudentUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParentStudentsApi.updateParentStudentApiV1ParentStudentsParentStudentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ParentStudentsApi - factory interface
 * @export
 */
export const ParentStudentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParentStudentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Parent Student
         * @param {ParentStudentCreate} parentStudentCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParentStudentApiV1ParentStudentsPost(parentStudentCreate: ParentStudentCreate, options?: RawAxiosRequestConfig): AxiosPromise<ParentStudentOut> {
            return localVarFp.createParentStudentApiV1ParentStudentsPost(parentStudentCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Parent Student
         * @param {number} parentStudentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ParentStudentOut> {
            return localVarFp.readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Parent Students
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentStudentsApiV1ParentStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParentStudentOut>> {
            return localVarFp.readParentStudentsApiV1ParentStudentsGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Parents By Student
         * @param {number} studentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParentStudentOut>> {
            return localVarFp.readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Students By Parent
         * @param {number} parentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ParentStudentOut>> {
            return localVarFp.readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Parent Student
         * @param {number} parentStudentId 
         * @param {ParentStudentUpdate} parentStudentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId: number, parentStudentUpdate: ParentStudentUpdate, options?: RawAxiosRequestConfig): AxiosPromise<ParentStudentOut> {
            return localVarFp.updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId, parentStudentUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParentStudentsApi - object-oriented interface
 * @export
 * @class ParentStudentsApi
 * @extends {BaseAPI}
 */
export class ParentStudentsApi extends BaseAPI {
    /**
     * 
     * @summary Create Parent Student
     * @param {ParentStudentCreate} parentStudentCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public createParentStudentApiV1ParentStudentsPost(parentStudentCreate: ParentStudentCreate, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).createParentStudentApiV1ParentStudentsPost(parentStudentCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Parent Student
     * @param {number} parentStudentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId: number, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).deleteParentStudentApiV1ParentStudentsParentStudentIdDelete(parentStudentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Parent Student
     * @param {number} parentStudentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId: number, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).readParentStudentApiV1ParentStudentsParentStudentIdGet(parentStudentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Parent Students
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public readParentStudentsApiV1ParentStudentsGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).readParentStudentsApiV1ParentStudentsGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Parents By Student
     * @param {number} studentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId: number, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).readParentsByStudentApiV1ParentStudentsStudentStudentIdGet(studentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Students By Parent
     * @param {number} parentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId: number, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).readStudentsByParentApiV1ParentStudentsParentParentIdGet(parentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Parent Student
     * @param {number} parentStudentId 
     * @param {ParentStudentUpdate} parentStudentUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentStudentsApi
     */
    public updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId: number, parentStudentUpdate: ParentStudentUpdate, options?: RawAxiosRequestConfig) {
        return ParentStudentsApiFp(this.configuration).updateParentStudentApiV1ParentStudentsParentStudentIdPut(parentStudentId, parentStudentUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UsersPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserApiV1UsersPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiV1UsersUserIdDelete: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserApiV1UsersUserIdDelete', 'userId', userId)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCurrentUserApiV1UsersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserApiV1UsersUserIdGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('readUserApiV1UsersUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersApiV1UsersGet: async (skip?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UsersUserIdPut: async (userId: number, userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserApiV1UsersUserIdPut', 'userId', userId)
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateUserApiV1UsersUserIdPut', 'userUpdate', userUpdate)
            const localVarPath = `/api/v1/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearerAuth", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserApiV1UsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1UsersPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUserApiV1UsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserApiV1UsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserApiV1UsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUserApiV1UsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readCurrentUserApiV1UsersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readCurrentUserApiV1UsersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.readCurrentUserApiV1UsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUserApiV1UsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUserApiV1UsersUserIdGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.readUserApiV1UsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersApiV1UsersGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersApiV1UsersGet(skip, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.readUsersApiV1UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserApiV1UsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UsersUserIdPut(userId, userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUserApiV1UsersUserIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): AxiosPromise<UserOut> {
            return localVarFp.createUserApiV1UsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserApiV1UsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserApiV1UsersUserIdDelete(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readCurrentUserApiV1UsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserOut> {
            return localVarFp.readCurrentUserApiV1UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read User
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUserApiV1UsersUserIdGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<UserOut> {
            return localVarFp.readUserApiV1UsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users
         * @param {number} [skip] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersApiV1UsersGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserOut>> {
            return localVarFp.readUsersApiV1UsersGet(skip, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {number} userId 
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig): AxiosPromise<UserOut> {
            return localVarFp.updateUserApiV1UsersUserIdPut(userId, userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserApiV1UsersPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserApiV1UsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserApiV1UsersUserIdDelete(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserApiV1UsersUserIdDelete(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readCurrentUserApiV1UsersMeGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).readCurrentUserApiV1UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read User
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUserApiV1UsersUserIdGet(userId: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUserApiV1UsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users
     * @param {number} [skip] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public readUsersApiV1UsersGet(skip?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).readUsersApiV1UsersGet(skip, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {number} userId 
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserApiV1UsersUserIdPut(userId: number, userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserApiV1UsersUserIdPut(userId, userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



